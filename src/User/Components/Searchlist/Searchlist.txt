import React, { useEffect, useState, useContext } from "react";
import { Link, useLocation } from "react-router-dom";
import Navbar from "../Navbar/Navbar";
import Footer from "../Footer/Footer";
import Pagination from "@mui/material/Pagination";
import Stack from "@mui/material/Stack";
import { Spinner } from "react-bootstrap";
import loaderGif from "../loader-spin.gif";
import "../Spinner/Spinner.css";
import { useAuth } from '../../../AuthContext';
import { ProfileContext } from '../ProfileContext';
import "./Searchlist.css";

const Searchlist = () => {
  const [data, setData] = useState([]);
  const [singleData, setSingleData] = useState([]);
  const [viewCount,setViewCount]=useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(true);
  const profilesPerPage = 12;
  const location = useLocation();
  const [fetchComplete, setFetchComplete] = useState(false);
  const [plan, setPlan] = useState(null);
  const [noPlan, setNoPlan] = useState("");
  const [viewProfile,setViewProfile]=useState(false);
  const [selectedprofileid,setSelectedprofileid]=useState(0);
  const { setProfileCount, setValidityDate } = useContext(ProfileContext);
  const query = new URLSearchParams(location.search);
  const { userid } = useAuth();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(
          "https://tulirmatrimony.com/controlapi/userhome.php",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ id: userid }),
          }
        );
        const result = await response.json();
        setData(result.body);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [userid]);

  useEffect(() => {
    const singlefetchDataa = async () => {
      try {
        const response = await fetch(
          `https://tulirmatrimony.com/controlapi/singlecustomer.php?id=${userid}`
        );
        const result = await response.json();
        setSingleData(result.body);
        setFetchComplete(true);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    };

    singlefetchDataa();
  }, [userid]);

  useEffect(() => {
    if (fetchComplete && data) {
      const sendPlanData = async () => {
        try {
          const response = await fetch(
            `https://tulirmatrimony.com/controlapi/usermemberplan.php`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                user_id: userid,
                plan: singleData.plan_name,
              }),
            }
          );
          const result = await response.json();
          const profileCount = result.body.plan_profile_count;
          setProfileCount(profileCount);
          localStorage.setItem('profileCount', profileCount);

          if (result.body && result.body.length > 0) {
            setPlan(result.body[0]);
            const expiryDate = calculateExpiryDate(data.plan_register_date, result.body[0].plan_validity);
            if (expiryDate) {
              setValidityDate(expiryDate);
              localStorage.setItem('validityDate', expiryDate.toISOString());
            }
          }
        } catch (error) {
          console.error("Error sending plan data:", error);
          setNoPlan("No Plan Selected");
        }
      };

      sendPlanData();
    }
  }, [fetchComplete, data, userid, setValidityDate]);

  const calculateExpiryDate = (registerDate, validity) => {
    if (!registerDate || isNaN(new Date(registerDate).getTime())) {
      console.error("Invalid date:", registerDate);
      return null;
    }

    const date = new Date(registerDate);
    const validityDays = parseInt(validity, 10); // e.g., 60
    if (isNaN(validityDays)) {
      console.error("Invalid validity value:", validity);
      return null;
    }

    date.setDate(date.getDate() + validityDays);
    return date;
  };

  const indexOfLastProfile = currentPage * profilesPerPage;
  const indexOfFirstProfile = indexOfLastProfile - profilesPerPage;
  const currentProfiles = data.slice(indexOfFirstProfile, indexOfLastProfile);

  const paginate = (event, pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleProfileClick = () => {
    let storedProfileCount = localStorage.getItem('profileCount');
    storedProfileCount = parseInt(storedProfileCount, 10);
    if (storedProfileCount !== null && storedProfileCount > 0) {
      storedProfileCount -= 1;
      localStorage.setItem('profileCount', storedProfileCount);
      setProfileCount(storedProfileCount);
    }
  };

  const storedValidityDate = localStorage.getItem('validityDate');
  const isExpired = storedValidityDate ? new Date() > new Date(storedValidityDate) : false;

  return (
    <>
      {loading ? (
        <div className="d-flex justify-content-center back-spin" style={{ height: "100vh", alignItems: "center" }}>
          <img src={loaderGif} alt="Loading..." className="load-spin" />
        </div>
      ) : (
        <>
          <Navbar />
          {singleData && plan ? (
            <>
           
          <section className="speakers-section-three pt-5">
            <div className="auto-container">
             
                <h4 className="mb-3">
                  உங்களிடம் <p>Profile Count: {plan.plan_profile_count-viewCount}</p> சுயவிவரங்களை பார்க்கும் வாய்ப்பு
                  உள்ளது. Expiry Date: {calculateExpiryDate(singleData.plan_register_date, plan.plan_validity)?.toISOString().split('T')[0]}
                </h4>
             
              {plan.plan_profile_count === null && <p>Loading profile count...</p>}
              {plan.plan_profile_count <= 0 && !isExpired && <p>You have no profiles left.</p>}
              {isExpired && <p>Your plan has expired.</p>}
            </div>
            <div className="auto-container">
              <div className="row">
                {currentProfiles.map((item, index) => (
                  <div key={index} className="speaker-block-three col-xl-3 col-lg-4 col-md-6 col-sm-12 wow fadeInUp animated">
                    <div className="inner-box">
                      <div className="image-box">
                        <figure className="image">
                          <a href="#" target="_blank">
                            <img src={`data:image/jpeg;base64,${item.image}`} alt="Profile Loading.." />
                          </a>
                        </figure>
                      </div>
                      <div className="info-box">
                        <h4 className="name">
                          <a href="#" className="cus_name" target="_blank">
                            {item.name}
                          </a>
                        </h4>
                        <a href="#" target="_blank" onClick={handleProfileClick}>
                          <span className="designation">Age : {item.age} </span>
                          <span className="designation">{item.education} </span>
                          <span className="designation">{item.occupaction} </span>
                          <span className="designation">{item.star} </span>
                          <span className="designation">{item.district} </span>
                        </a>
                        <Link
                          className="btn py-2 mt-2 view-pro"
                          to={`/Viewuser/${item.user_id}`}
                          onClick={()=>{
                            // setSelectedprofileid(item.user_id);
                            // setViewCount(viewCount+1);
                            // setViewProfile(true);
                            handleProfileClick();
                          }}
                          disabled={plan.plan_profile_count === null || plan.plan_profile_count <= 0 || isExpired}
                        >
                          View Profile
                        </Link>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div align="center" className="col-lg-12">
                <Stack spacing={2}>
                  <Pagination
                    count={Math.ceil(data.length / profilesPerPage)}
                    page={currentPage}
                    onChange={paginate}
                    color="secondary"
                  />
                </Stack>
              </div>
            </div>
          </section> 
          </>

        ) : (
          <p>{noPlan ? noPlan : "Loading..."}</p>
        )}
          <Footer />
        </>
      )}
    </>
  );
};

export default Searchlist;
